// Pull in default Jenkinsfile
jenkinsfileURL = "https://github.com/fdut/apicv5-devops"

product = "give-version-product_1.0.0.yaml"

//Name of credential object in Jenkins
creds = "icapikey"

//APIC Environment variables
intServer = "eu-de.apiconnect.ibmcloud.com"
intCatalog = "integration"
intOrg = "integration"
intCreds = "icapikey"
apicPath = "/home/uadmin/.nvm/versions/node/v8.15.1/bin/apic"

node {    

    try{
        echo "Workspace: ${env.WORKSPACE}"

        gitCheckout(env.WORKSPACE, jenkinsfileURL, creds)  

        //Publish to integration server
        deploy(intServer, intCreds, product, intCatalog, intOrg)  

    } catch(exe)
    {
        echo "${exe}"
        error("[FAILURE] Failed to publish ${product}")
    }
}    

/**
 * Clones and checks out the given Git repository branch and commit
 * @param  String workspace     Path of the working directory to use
 * @param  String url           URL of the Git repository
 * @param  String credentialsId Id of the Git credentials to use
 *  (From the credentials plugin in Cloudbees)
 */
def gitCheckout(String workspace, String url, String credentialsId) {


        try {
        //Delete the content of the workspace and clone the source code into current directory
        sh """
            rm -rf ${workspace}/tmp
            git clone ${jenkinsfileURL} ${workspace}/tmp
            cd ${workspace}/tmp
            echo pwd && ls -l     
        """
        } catch(exe){
            echo "Failed to retrieve to the content of the workspace with Status Code: ${exe}"
            throw exe                       
        }  
}

def deploy(String server, String creds, String product, String catalog, String org, String space = "") {
        //Login to Dev Server
        try {
            echo "Attempting Login to ${server}"                     
            apic_login(server, creds)                      
        } catch(exe){
            echo "Failed to Login to ${server} with Status Code: ${exe}"
            throw exe                       
        }  

        //Publish to dev server
        //If the status code is non zero i.e. publish failed, abort the pipeline.
        //def status = apic.publish(product, catalog, org, server, space)
        stage ('Publish') {
            def status = apic_publish(product, catalog, org, server, space)
            if(status != 0) 
            {
            currentBuild.result = "FAILED"
            error("[FAILURE] Failed to publish ${product}")
            }  
        } 
        //Logout for dev server
        stage ('Logout') {
            logoutFailed = false
            try {
                //apic.logout(server)
                apic_logout(server)
                echo "Logged out of ${server}"
            } catch (exe) {
                echo "Failed to Log out with Status Code: ${exe}, check Environment manually."
                logoutFailed = true
                throw exe
            } 
        }   
}

def apic_login(String server, String creds){
    withCredentials([string(credentialsId: "${creds}", variable: 'APIKEY')]) {
    sh """
      ${apicPath} login --server ${server} -k $APIKEY
    """
  }

    echo "Successfully Logged In: ${server}"
}
e

def apic_logout(String server){
    sh "apic logout -s ${server}"
}

//Publish to Catalog or Space
def apic_publish(String product, String catalog, String org, String server, String space = ""){
    echo "Publishing product ${product}"
        if (!space.trim()) {
            def status = sh script: "${apicPath} products:publish ${product} --catalog ${catalog} --organization ${org} --server ${server}", 
                returnStatus: true  
            return status  
        }
        else {
        def status = sh script: "${apicPath} products:publish  -c ${catalog} -o ${org} -s ${server} --space ${space} --scope space tmp/${product} ", 
            returnStatus: true  
        return status     
        }  
} 
